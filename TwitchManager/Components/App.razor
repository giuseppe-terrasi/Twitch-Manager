@using Microsoft.AspNetCore.Localization
@using System.Globalization
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="TwitchManager.styles.css" />
    <link rel="stylesheet" href="bootstrap.min.css">
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
    <link rel="icon" type="image/x-icon" href="img/favicon.ico?v1">
    <template id="phosphor-links" data-permanent>
    </template>
    <title>Twitch Manager</title>
    <HeadOutlet />
</head>

<body onload="toggleLightMode(true)">
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
    <script>
        var head = document.getElementById("phosphor-links");

        for (weight of ["regular", "thin", "light", "bold", "fill", "duotone"]) {
            var link = document.createElement("link");
            link.setAttribute("data-permanent", '');
            link.rel = "stylesheet";
            link.type = "text/css";
            link.href =
                "https://unpkg.com/@@phosphor-icons/web@2.0.3/src/" + weight + "/style.css";
            head.appendChild(link);
        }
    </script>
    <script>

        function openUrl(url) {
            window.open(url, "_blank");
        }

        function toggleLightMode(init) {
            return;
            var darkMode = localStorage.getItem("TwitchManager-darkMode") || "false";

            if (!init && darkMode === "true") {
                darkMode = "false";
            }
            else if(!init)
            {
                darkMode = "true";
            }

            var element = document.getElementById('main-container');

            if (darkMode === "true") {

                element.classList.add("dark-mode");
                document.getElementById("light-mode-icon").classList.add("ph-sun");
                document.getElementById("light-mode-icon").classList.remove("ph-moon");
            }
            else {
                element.classList.remove("dark-mode");
                document.getElementById("light-mode-icon").classList.remove("ph-sun");
                document.getElementById("light-mode-icon").classList.add("ph-moon");
            }

            localStorage.setItem("TwitchManager-darkMode", darkMode);
        }
    </script>
    <script>
        async function getDownloadDir() {
            window.downloadDir = null;

            window.downloadDir = await window.showDirectoryPicker();
            window.downloadDir.requestPermission({ mode: "readwrite" });
        }

        async function saveFile(streamRef, filename) {
            const stream = await streamRef.stream();
            //const file = new Blob([stream], { type: "text/plain" });
            const handle = await window.downloadDir.getFileHandle(filename, { create: true });
            const writable = await handle.createWritable();
            await stream.pipeTo(writable);
            //await writable.close();
        }
    </script>
</body>
</html>

@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; }

    protected override void OnInitialized()
    {
        HttpContext?.Response.Cookies.Append(
            CookieRequestCultureProvider.DefaultCookieName,
            CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(CultureInfo.CurrentCulture,CultureInfo.CurrentUICulture)));
    }
}