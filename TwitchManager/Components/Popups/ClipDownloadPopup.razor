@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using TwitchManager.Models.Clips
@using TwitchManager.Models.General
@using TwitchManager.Services.Abstractions
@using TwitchManager.Translations

@inject IClipService ClipService

@inject IStringLocalizer<Translation> Localizer

@inject IOptionsMonitor<ConfigData> OptionsMonitor

@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col-12">
        <div class="download-statistics">
            <span class="text-start">@Localizer["TotalDownloadClipsLabel"]: @Clips.Count</span>
            <span class="text-start">@Localizer["RemainingDownloadClipsLabel"]: @remainingClips</span>
            <span class="text-start">@Localizer["ErrorsLabel"]: @errors</span>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(current))
{
    <div class="row">
        <div class="col-12">
            <span>@Localizer["CurrentClipLabel"]: @current</span>
            <div class="spinner-border" role="status" style="position: relative; left: 15px; top: 5px;color: #6441A5;">
                <span class="sr-only"></span>
            </div>
        </div>
    </div>
}

<div class="row mt-3">
    <div class="col-12">

        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" @bind-Value="@percentage" ShowValue="false" />
    </div>
</div>

<div class="row mt-3">
    <div class="col-12 grid-2-items">
        <button class="btn btn-secondary" @onclick="() => Cancel()">
            @Localizer["CancelLabel"]
        </button>
        <button class="btn btn-primary" disabled="@(remainingClips > 0)" @onclick="() => DialogService.Close()">
            @Localizer["CloseLabel"]
        </button>
    </div>
</div>

@code {

    [Parameter]
    public DialogService DialogService { get; set; }

    [Parameter]
    public IList<ClipModel> Clips { get; set; }

    private int remainingClips = 0;
    private int errors = 0;
    private double percentage = 0;
    private string current = "";

    CancellationTokenSource cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        remainingClips = Clips.Count;

        var configType = OptionsMonitor.CurrentValue.ConfigType;

        if(configType == ConfigType.Web)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("getDownloadDir");
            }
            catch
            {
                Cancel();
                return;
            }
            
        }

        foreach (var clip in Clips)
        {
            current = clip.Title;

            await InvokeAsync(StateHasChanged);

            try
            {
                var downloadLink = clip.VideoUrl;

                if(string.IsNullOrEmpty(downloadLink))
                {
                    downloadLink = await ClipService.GetDownloadLinkAsync(clip.Id, cancellationTokenSource.Token);
                }

                if (!string.IsNullOrEmpty(downloadLink))
                {
                    var httpClient = new HttpClient();
                    var response = await httpClient.GetStreamAsync(downloadLink, cancellationTokenSource.Token);
                    if(configType == ConfigType.Web)
                    {
                        var streamRef = new DotNetStreamReference(stream: response, leaveOpen: true);
                        await JSRuntime.InvokeVoidAsync("saveFile", streamRef, $"{clip.Id}.mp4");
                    }
                    else
                    {
                        using (var fs = new FileStream(Path.Combine(OptionsMonitor.CurrentValue.ClipDownloadPath, $"{clip.Id}.mp4"), FileMode.Create))
                        {
                            await response.CopyToAsync(fs, cancellationTokenSource.Token);
                        }
                    }
                }
            }
            catch
            {
                errors++;
            }
            finally
            {
                remainingClips--;
            }

            percentage = 100 - ((double)remainingClips / (double)Clips.Count * 100);

            await InvokeAsync(StateHasChanged);
        }

        current = "";
    }

    private void Cancel()
    {
        cancellationTokenSource.Cancel();
        DialogService.Close();
    }
}
