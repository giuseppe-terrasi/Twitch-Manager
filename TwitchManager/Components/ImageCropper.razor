@inject IJSRuntime JSRuntime

@if(!string.IsNullOrEmpty(image))
{
    <div class="row">
        <div class="col-12">
            <img src="@image" id="image" style="width: 960px; height: 540px"/>
        </div>
    </div>

    <button type="button" class="btn btn-primary" @onclick="async () => await ConfirmAsync()">
        Seleziona
    </button>
}

@code {

    public class ImageCropperData
    {
        public int X { get; init; }
        public int Y { get; init; }
        public int Width { get; init; }
        public int Height { get; init; }
        public string Image { get; init; }
    }


    [Parameter]
    public string ImageUrl { get; set; }

    [Parameter]
    public EventCallback<ImageCropperData> OnCrop { get; set; }

    private static ImageCropper instance;

    private double x, y, width, height;

    private string image = "";

    protected override async Task OnInitializedAsync()
    {
        instance = this;

        await ImageUrlToBase64Async(ImageUrl);
    }

    [JSInvokable]
    public static async Task ImageCropperSetDataAsync(double x, double y, double width, double height)
    {
        instance.x = x * 4;
        instance.y = y * 4;
        instance.width = width * 4;
        instance.height = height * 4;

        await instance.InvokeAsync(instance.StateHasChanged);
    }

    private async Task ImageUrlToBase64Async(string imageUrl)
    {
        using var httClient = new HttpClient();
        var imageBytes = await httClient.GetByteArrayAsync(imageUrl);

        image = "data:image/jpg;base64," + Convert.ToBase64String(imageBytes);

        await InvokeAsync(StateHasChanged);

        await JSRuntime.InvokeVoidAsync("loadCropper", "image");
    }

    private async Task ConfirmAsync()
    {
        var image = await JSRuntime.InvokeAsync<string>("getCroppedImage", "image");

        await OnCrop.InvokeAsync(new ImageCropperData
        {
            X = (int)(x < 0 ? 0 : x),
            Y = (int)(y < 0 ? 0 : y),
            Width = (int)width,
            Height = (int)(height > 1080 ? 1080 : height),
            Image = image
        });
    }
}
