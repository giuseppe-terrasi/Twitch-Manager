@page "/settings"

@using Microsoft.EntityFrameworkCore
@using TwitchManager.Auth.Attributes
@using TwitchManager.Components.Abstractions
@using TwitchManager.Data
@using TwitchManager.Helpers
@using TwitchManager.Models.General

@inject IWritableOptions<ConfigData> WritableOptions
@inject IDbContextFactory<TwitchManagerDbContext> DbContextFactory

@inherits BaseComponent

@attribute [AllowNotConfigured]

@rendermode InteractiveServerNotPrerendered


<h1 class="page-title">
    @Localizer["ConfigureTitle"]
</h1>

<div class="row">
    <div class="col-12">
        <RadzenTemplateForm TItem="ConfigData" Submit="async () => await SaveAsync()" Data="_model">
            <div class="row">
                <div class="col-12">
                    <CultureSelector />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12">
                    <RadzenLabel>
                        @Localizer["DbConnectionString"]
                    </RadzenLabel>
                    <RadzenTextArea @bind-Value="_model.FilePath" class="form-control" Name="DbConnectionString" />
                    <RadzenCustomValidator Component="DbConnectionString" Text="@Localizer["NotDirectoryError"]" Validator="() => !System.IO.Directory.Exists(_model.FilePath)" />
                    <RadzenCustomValidator Component="DbConnectionString" Text="@string.Format(Localizer["InvalidDbFileExtesion"], Path.GetExtension(_model.FilePath))" Validator="@(() => Path.GetExtension(_model.FilePath) == ".db")" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12">
                    <RadzenLabel>
                        @Localizer["ClientId"]
                    </RadzenLabel>
                    <RadzenTextBox @bind-Value="_model.ClientId" class="form-control" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12">
                    <RadzenLabel>
                        @Localizer["ClientSecret"]
                    </RadzenLabel>
                    <RadzenTextBox @bind-Value="_model.ClientSecret" class="form-control" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12">
                    <RadzenLabel>
                        @Localizer["BaseUrl"]
                    </RadzenLabel>
                    <RadzenTextBox @bind-Value="_model.BaseUrl" class="form-control" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12">
                    <RadzenLabel>
                        @Localizer["TokenUrl"]
                    </RadzenLabel>
                    <RadzenTextBox @bind-Value="_model.TokenUrl" class="form-control" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12">
                    <RadzenLabel>
                        @Localizer["ClipDownloadPathLabel"]
                    </RadzenLabel>
                    <RadzenTextBox @bind-Value="_model.ClipDownloadPath" class="form-control" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12 d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary">
                        @Localizer["SaveLabel"]
                    </button>
                </div>
            </div>
        </RadzenTemplateForm>
    </div>
</div>






@code {

    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; }

    private ConfigData _model = new();

    protected override void OnInitialized()
    {

        @if (!string.IsNullOrEmpty(WritableOptions.Value.DbConnectionString))
        {
            _model.DbConnectionString = WritableOptions.Value.DbConnectionString;
            _model.ClientId = WritableOptions.Value.ClientId;
            _model.ClientSecret = WritableOptions.Value.ClientSecret;
            _model.BaseUrl = WritableOptions.Value.BaseUrl;
            _model.TokenUrl = WritableOptions.Value.TokenUrl;
            _model.ClipDownloadPath = WritableOptions.Value.ClipDownloadPath;
        }
        else
        {
            _model.DbConnectionString = new System.IO.FileInfo(System.Reflection.Assembly.GetEntryAssembly().Location).Directory.FullName;
        }
    }

    private async Task SaveAsync()
    {
        WritableOptions.Update(o =>
        {
            o.DbConnectionString = _model.DbConnectionString;
            o.ClientId = _model.ClientId;
            o.ClientSecret = _model.ClientSecret;
            o.BaseUrl = _model.BaseUrl;
            o.TokenUrl = _model.TokenUrl;
            o.ClipDownloadPath = _model.ClipDownloadPath;
        });

        if(!File.Exists(_model.FilePath))
        {
            using var context = DbContextFactory.CreateDbContext();
            await context.Database.EnsureCreatedAsync();
        }

        NavigationManager.NavigateTo(ReturnUrl ?? "/");
    }
}
