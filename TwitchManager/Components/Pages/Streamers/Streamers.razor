@page "/streamers"

@using TwitchManager.Components.Abstractions
@using TwitchManager.Components.Popups
@using TwitchManager.Models.Clips
@using TwitchManager.Models.Streamers
@using TwitchManager.Services.Abstractions

@inject IStreamerService StreamerService
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServerNotPrerendered

@inherits BaseComponent

<PageTitle>
    @Localizer["StreamersPageTitle"]
</PageTitle>

<div class="row page-title">
    <div class="col-8">
        <h1>
            @Localizer["StreamersPageTitle"]
        </h1>
    </div>
    <div class="col-4 d-flex justify-content-end">
        <button class="btn btn-primary d-flex justify-content-center align-items-center" @onclick="async () => await AddFromTwitchAsync()">
            @Localizer["AddFromTwitchLabel"] <i class="ph ph-twitch-logo ms-3"></i>
        </button>
    </div>
</div>

@if(_loaded && !streamers.Where(s => s.IsClipDefault).Any())
{
    <div class="mt-3">
        <div class="col-12">
            <span>
                @Localizer["NoDefaultStreamerSelected"]
            </span>
        </div>
    </div>
}

<div class="row mt-3">
    <div class="col-12">
        <div class="d-none d-md-block">
            <label class="mb-0">@Localizer["ShowAsTableLabel"]</label>
            <RadzenSwitch @bind-Value=showTable class="ms-2" />
        </div>
    </div>
</div>

<div class="row mt-3">
    <div class="col-12 table-responsive">
        @if(showTable)
        {
            <div class="mt-3">
                <TableStreamer Streamers="streamers" DefaultChanged="s => ToggleDefault(s)"/>
            </div>
        }
        else
        {
            <CardStreamer Streamers="streamers" DefaultChanged="s => ToggleDefault(s)" />
        }
    </div>
</div>
@code {

    private ICollection<StreamerModel> streamers = new List<StreamerModel>();

    private bool _loaded = false;

    private bool showTable;

    protected override async Task OnInitializedAsync()
    {
        await ExecuteAsync(async () =>
        {
            await LoadStreamersAsync();

            _loaded = true;
        });
    }

    private async Task AddFromTwitchAsync()
    {
        var toAdd = await DialogService.OpenAsync<AddFromTwitchPopup>("Aggiungi Streamer da Twitch", new Dictionary<string, object>()
        {
            { "DialogService", DialogService }
        });

        if (toAdd != null)
        {
            await ExecuteAsync(async () =>
            {
                await StreamerService.AddAsync(toAdd);

                await LoadStreamersAsync();
                
            });
        }
    }

    private async Task LoadStreamersAsync()
    {

        var isAdmin = HttpContextAccessor.HttpContext.User.IsInRole("Admin");

        if (isAdmin)
        {
            streamers = await StreamerService.GetAllAsync();

        }
        else
        {
            streamers = await StreamerService.GetAllByUserAsync();

        }
    }

    private void ToggleDefault(StreamerModel streamer)
    {
        var currentDefault = streamers.Where(s => s.IsClipDefault).FirstOrDefault();

        streamer.IsClipDefault = !streamer.IsClipDefault;

        try
        {
            if (currentDefault != null)
            {
                currentDefault.IsClipDefault = false;
                StreamerService.UpdateAsync(currentDefault).ConfigureAwait(false);
            }

            StreamerService.UpdateAsync(streamer).ConfigureAwait(false);
        }
        catch
        {

        }
    }
}