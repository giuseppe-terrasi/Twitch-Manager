@page "/clips"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Options
@using TwitchManager.Components.Abstractions
@using TwitchManager.Components.Popups
@using TwitchManager.Helpers
@using TwitchManager.Models.Clips
@using TwitchManager.Models.General
@using TwitchManager.Models.Streamers
@using TwitchManager.Services.Abstractions

@inject IClipService ClipService
@inject IStreamerService StreamerService
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServerNotPrerendered

@inherits BaseComponent

@attribute [Authorize]

<PageTitle>@Localizer["ClipPageTitle"]</PageTitle>

<div class="row page-title">
    <div class="col-8">
        <h1>
            @Localizer["ClipPageTitle"]
        </h1>
    </div>
    <div class="col-4 d-flex justify-content-end align-items-center">
        <RadzenLabel class="me-3">@Localizer["StreamerLabel"]:</RadzenLabel>
        <RadzenDropDown Data="streamers" TValue="StreamerModel" @bind-Value=currentStreamer Context="streamer" Change="async () => await LoadClipsAsync(false)">
            <Template>
                <div class="d-flex align-items-center justify-content-start">
                    <img src="@(((StreamerModel)streamer).ProfileImageUrl)" class="img-fluid me-2" style="height: 25px"/>
                    <span>@(((StreamerModel)streamer).DisplayName)</span>
                </div>
            </Template>
            <EmptyTemplate>
                @Localizer["NoStreamerImportedLabel"]
            </EmptyTemplate>
        </RadzenDropDown>
    </div>
</div>
<Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>
    <Microsoft.AspNetCore.Components.Authorization.AuthorizeView Roles="Admin">
        <Authorized>
            <button class="btn btn-link text-decoration-none d-flex justify-content-center align-items-center text-black ps-0" @onclick="async () => await SyncWithTwitchAsync()">
                @Localizer["SyncLabel"] <i class="ph ph-arrows-clockwise ms-2"></i>
            </button>
        </Authorized>
    </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
</Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>


<div class="row">
    <div class="col-12 table-responsive">
        <RadzenDataGrid Data="@clips" TItem="ClipModel" PagerPosition="PagerPosition.Bottom" AllowPaging="true" AllowSorting="true" PageSize="pageSize" AllowFiltering=false @ref=grid
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" SelectionMode="DataGridSelectionMode.Multiple" FilterMode="FilterMode.Simple" LogicalFilterOperator="LogicalFilterOperator.And">
            <HeaderTemplate>
                <div class="row">
                    <div class="col-10 d-flex align-items-end">
                        <div class="pointer mb-1" @onclick="() => showFilter = !showFilter">
                            <h4 class="d-inline">@Localizer["FilterLabel"]</h4>
                            <i class="ph ph-caret-@(showFilter? "up" : "down") ms-2"></i>
                        </div>
                    </div>
                    <div class="col-2">
                        <label class="d-block">@Localizer["ClipPerPageLabel"]</label>
                        <RadzenDropDown TValue="int" Data="new[] { 10, 20, 30, 50, 100 }" Value="pageSize"
                                        Change=" async (v)=> { pageSize = (int)v; await grid.Reload(); }" class="w-100" />
                    </div>
                </div>
                @if (showFilter)
                {
                    <div class="row">
                        <div class="col-12">
                            <div class="row">
                                <div class="col-2">
                                    <label class="d-block">@Localizer["ClipCreatedFromLabel"]</label>
                                    <RadzenDatePicker @bind-Value="fromDate" DateFormat="d" Change="async () => await SetCreatedAtFilterAsync(grid.ColumnsCollection[2])" AllowClear=true class="w-100">
                                    </RadzenDatePicker>
                                </div>
                                <div class="col-2">
                                    <label class="d-block">@Localizer["ClipCreatedToLabel"]</label>
                                    <RadzenDatePicker @bind-Value="toDate" DateFormat="d" Change="async () => await SetCreatedAtFilterAsync(grid.ColumnsCollection[2])" AllowClear=true class="w-100" />
                                </div>
                                <div class="col-4">
                                    <label class="d-block">@Localizer["GameNameLabel"]</label>
                                    <RadzenDropDown TValue="List<string>" Data="games" @bind-Value=selectedGames AllowFiltering=true FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple=true
                                                    Change="async () => await SetGameFilterAsync(grid.ColumnsCollection[5])" class="w-100" AllowClear=true />
                                </div>
                                <div class="col-4">
                                    <label class="d-block">@Localizer["CreatorNameLabel"]</label>
                                    <RadzenDropDown TValue="List<string>" Data="creators" @bind-Value=selectedCreators AllowFiltering=true FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple=true
                                                    Change=" async ()=> await SetCreatorFilterAsync(grid.ColumnsCollection[6])" class="w-100" AllowClear=true />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <label class="d-block">@Localizer["TitleLabel"]</label>
                            <RadzenTextBox class="w-100" @oninput="async (v)=> await SetTitleFilterAsync(v.Value.ToString(), grid.ColumnsCollection[3])" />
                        </div>
                    </div>
                }
                <div class="row mt-3">
                    <div class="col-6 d-flex justify-content-start align-items-center">
                        @Localizer["TotalsLabel"]: <b class="mx-1">@clips.Count()</b>
                        @Localizer["FilteredLabel"]: <b class="mx-1">@grid.View.Count()</b>
                    </div>
                    <div class="col-6 d-flex justify-content-end align-items-center">
                        <button class="btn btn-primary d-flex justify-content-center align-items-center" disabled="@(selectedClips.Count == 0)" @onclick="async () => await DownloadSelectedAsync()">
                            @Localizer["DownloadSelectedLabel"] <i class="ph ph-download-simple ms-3"></i>
                        </button>
                    </div>
                </div>
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="ClipModel" Sortable="false" Filterable="false" Width="50px">
                    <HeaderTemplate>
                        <RadzenCheckBox TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                                        Value="@(selectedClips?.Any() != true ? false : !clips.All(i => selectedClips.Contains(i)) ? null : clips.Any(i => selectedClips.Contains(i)))"
                                        Change="@(args => selectedClips = args == true ? clips.ToList() : new List<ClipModel>())" />
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenCheckBox TriState="false" Value="@(selectedClips != null && selectedClips.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                                        TValue="bool" Change=@(args => { if(args) selectedClips.Add(data); else {selectedClips.Remove(data); StateHasChanged();} }) />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ClipModel" Property="@(nameof(ClipModel.Id))" Title="Id" Filterable=false Reorderable=false Sortable=false/>
                <RadzenDataGridColumn TItem="ClipModel" Property="@(nameof(ClipModel.CreatedAt))" Title="Creata il" Context="clip" FilterOperator="FilterOperator.Custom">
                    <Template>
                        @DateTime.SpecifyKind(clip.CreatedAt, DateTimeKind.Utc).ToLocalTime().ToString()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ClipModel" Property="@(nameof(ClipModel.Title))" Title="@Localizer["TitleLabel"]" FilterOperator="FilterOperator.Custom"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ClipModel" Property="@(nameof(ClipModel.ViewCount))" Title="@Localizer["ViewCountLabel"]" Filterable=false/>
                <RadzenDataGridColumn TItem="ClipModel" Property="@(nameof(ClipModel.GameName))" Title="@Localizer["GameNameLabel"]" FilterOperator="FilterOperator.Custom">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ClipModel" Property="@(nameof(ClipModel.CreatorName))" Title="@Localizer["CreatorNameLabel"]" FilterOperator="FilterOperator.Custom">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ClipModel" Title="@Localizer["ActionsLabel"]" Context="clip" Filterable=false Reorderable=false Sortable=false TextAlign="TextAlign.Center">
                    <Template>
                        <div class="d-flex justify-content-center align-items-center">
                            <a href="/show-clip/@clip.Id" target="_blank" class="text-decoration-none text-black">
                                <i class="ph ph-eye grid-icon"></i>
                            </a>
                            <a href="@clip.Url" target="_blank" class="text-decoration-none text-black">
                                <i class="ph ph-arrow-square-out grid-icon mx-3"></i>
                            </a>
                            <button type="button" class="btn btn-link text-decoration-none text-black p-0" @onclick="async () => await DownloadAsync(clip)">
                                <i class="ph ph-download-simple grid-icon"></i>
                            </button>
                        </div>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>
@code {

    private IEnumerable<ClipModel> clips = new List<ClipModel>();
    private IList<ClipModel> selectedClips = new List<ClipModel>();
    private IEnumerable<StreamerModel> streamers = new List<StreamerModel>();

    private StreamerModel currentStreamer = null;

    RadzenDataGrid<ClipModel> grid;

    DateTime? fromDate;
    DateTime? toDate;

    List<string> selectedGames = new();
    List<string> selectedCreators = new();

    IEnumerable<string> games = null;
    IEnumerable<string> creators = null;

    int pageSize = 10;

    bool showFilter = true;

    private async Task SetTitleFilterAsync(string title, RadzenDataGridColumn<ClipModel> column)
    {
        string where = "";

        if(!string.IsNullOrEmpty(title))
        {
            where = $@"Title.Contains(""{title}"", StringComparison.InvariantCultureIgnoreCase)";
        }
        
        await column.SetCustomFilterExpressionAsync(where);
    }

    private async Task SetCreatedAtFilterAsync(RadzenDataGridColumn<ClipModel> column)
    {
        string where;
        string from = "";
        string to = "";

        if(fromDate.HasValue)
        {
            from = $@"CreatedAt.Date >= DateTime(""{fromDate.Value.Date.ToString("yyyy-MM-ddTHH:mm:ss")}"")";
        }

        if (toDate.HasValue)
        {
            to = $@"CreatedAt.Date <= DateTime(""{toDate.Value.Date.ToString("yyyy-MM-ddTHH:mm:ss")}"")";
        }

        if (fromDate.HasValue && toDate.HasValue)
        {
            where = $"{from} and {to}";
        }
        else
        {
            where = from + to;
        }

        await column.SetCustomFilterExpressionAsync(where);
    }


    private async Task SetGameFilterAsync(RadzenDataGridColumn<ClipModel> column)
    {
     
        string where;

        if (selectedGames != null && selectedGames.Any())
        {
            where = "(" + string.Join(" or ",
                selectedGames.Select(s => $"GameName == \"{s}\"")) + ")";
        }
        else
        {
            where = "";
        };

        await column.SetCustomFilterExpressionAsync(where);
    }

    private async Task SetCreatorFilterAsync(RadzenDataGridColumn<ClipModel> column)
    {

        string where;

        if (selectedCreators != null && selectedCreators.Any())
        {
            where = "(" + string.Join(" or ",
                selectedCreators.Select(s => $"CreatorName == \"{s}\"")) + ")";
        }
        else
        {
            where = "";
        };

        await column.SetCustomFilterExpressionAsync(where);
    }

    protected override async Task OnInitializedAsync()
    {
        await ExecuteAsync(async () =>
        {
            streamers = await StreamerService.GetAllAsync();
            var userId = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.GetUserId();
            currentStreamer = streamers.Where(s => s.Id == userId).FirstOrDefault() ??
                streamers.FirstOrDefault();
            await LoadClipsAsync(true);
        });
    }

    private async Task LoadClipsAsync(bool isLoading)
    {
        var func = async () =>
        {
            clips = await ClipService.GetByStreamerAsync(currentStreamer?.Id ?? "");
            games = clips.Select(c => c.GameName).Distinct();
            creators = clips.Select(c => c.CreatorName).Distinct();
        };

        if (isLoading)
        {
            await func();
        }
        else
        {
            await ExecuteAsync(func);
        }
    }

    private async Task DownloadAsync(ClipModel clipModel)
    {
        await DialogService.OpenAsync<ClipDownloadPopup>(Localizer["DownloadSelectedTitle"], new Dictionary<string, object>()
        {
            { "Clips", new List<ClipModel>(){ clipModel } }, { "DialogService", DialogService }
        }, new DialogOptions()
        {
            CloseDialogOnEsc = false,
            CloseDialogOnOverlayClick = false,
            ShowClose = false
        });
    }

    private async Task SyncWithTwitchAsync()
    {
        await ExecuteAsync(async () =>
        {
            await ClipService.GetFromApiAsync(currentStreamer?.Id);
            await LoadClipsAsync(true);
        });
    }

    private async Task DownloadSelectedAsync()
    {
        await DialogService.OpenAsync<ClipDownloadPopup>(Localizer["DownloadSelectedTitle"], new Dictionary<string, object>()
        {
            { "Clips", selectedClips }, { "DialogService", DialogService }
        }, new DialogOptions() {
            CloseDialogOnEsc = false,
            CloseDialogOnOverlayClick = false,
            ShowClose = false
        });


    }
}